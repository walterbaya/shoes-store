package com.shoesstore.shoesstore.controller;


import com.shoesstore.shoesstore.dto.ProductWithSuppliersDTO;
import com.shoesstore.shoesstore.model.Product;
import com.shoesstore.shoesstore.service.ProductService;
import jakarta.validation.Valid;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/products")
public class ProductController {

    private final ProductService productService;

    // Inyecci칩n de dependencias
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping
    public String listarProductos(Model model) {
        List<ProductWithSuppliersDTO> products = productService.getAllProductsWithSuppliers();
        model.addAttribute("products", products);

        model.addAttribute("title", "Productos");
        model.addAttribute("view", "products/list");
        return "layout";
    }

    @GetMapping("/new")
    public String showProductForm(Model model) {
        model.addAttribute("allGenders", Product.Gender.values());
        model.addAttribute("product", new Product());
        model.addAttribute("shoeSizes", Product.ShoeSize.values()); // Pasa los valores del enum
        model.addAttribute("view", "products/form");
        return "layout";
    }

    @PostMapping("/save")
    public String saveProduct(
            @Valid @ModelAttribute("product") Product product,
            BindingResult result,
            Model model) {

        // repoblamos tallas y la vista
        model.addAttribute("allSizes", Product.ShoeSize.values());
        model.addAttribute("view", "products/form");

        // errores de validaci칩n est치ndar
        if (result.hasErrors()) {
            return "layout";
        }

        try {
            productService.saveProduct(product);
        } catch (IllegalArgumentException ex) {
            // pasamos el mensaje de excepci칩n al modelo
            model.addAttribute("error", ex.getMessage());
            return "layout";
        }

        return "redirect:/products";
    }

    @GetMapping("/edit/{id}")
    public String showEditForm(@PathVariable Long id, Model model) {
        Product product = productService.getProductById(id);
        model.addAttribute("product", product);
        model.addAttribute("allSizes", Product.ShoeSize.values()); // Si usas el enum de tallas
        model.addAttribute("view", "products/edit");
        return "layout";
    }

    @PutMapping("/update/{id}")
    public String updateProduct(
            @PathVariable Long id,
            @Valid @ModelAttribute("product") Product product,
            BindingResult result,
            Model model) {

        model.addAttribute("allSizes", Product.ShoeSize.values());
        model.addAttribute("view", "products/edit");

        if (result.hasErrors()) {
            return "layout";
        }

        try {
            product.setId(id);  // aseguramos que venga el mismo ID de la URL
            productService.updateProduct(product);
        } catch (IllegalArgumentException ex) {
            model.addAttribute("error", ex.getMessage());
            return "layout";
        }

        return "redirect:/products";
    }

    @DeleteMapping("/{id}")
    public String deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return "redirect:/products";
    }

}