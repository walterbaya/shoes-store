package com.shoesstore.shoesstore.service;

import com.shoesstore.shoesstore.model.Claim;
import com.shoesstore.shoesstore.model.Product;
import com.shoesstore.shoesstore.model.Sale;
import com.shoesstore.shoesstore.model.SaleDetails;
import com.shoesstore.shoesstore.repository.ClaimRepository;
import com.shoesstore.shoesstore.repository.SaleDetailsRepository;
import com.shoesstore.shoesstore.repository.SaleRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


@Service
public class ClaimService {

    private final ClaimRepository claimRepository;
    private final SaleRepository saleRepository;
    private final SaleDetailsRepository saleDetailsRepository;
    private final ProductService productService;

    @Autowired
    public ClaimService(ClaimRepository claimRepository,
                        SaleRepository saleRepository,
                        SaleDetailsRepository saleDetailsRepository,
                        ProductService productService) {
        this.claimRepository = claimRepository;
        this.saleRepository = saleRepository;
        this.saleDetailsRepository = saleDetailsRepository;
        this.productService = productService;
    }

    // Crear nuevo reclamo
    @Transactional
    public Claim createClaim(Long saleId, String description, Map<Long, Integer> claimItems) {
        Sale sale = saleRepository.findById(saleId)
                .orElseThrow(() -> new EntityNotFoundException("Venta no encontrada"));

        Claim claim = new Claim();
        claim.setSale(sale);
        claim.setDescription(description);
        claim.setState(Claim.State.INITIATED);
        claim.setCreatedAt(LocalDateTime.now());

        // Guardar el reclamo primero
        Claim savedClaim = claimRepository.save(claim);

        // Procesar cada item reclamado
        List<SaleDetails> claimedDetails = new ArrayList<>();

        claimItems.forEach((saleDetailId, quantity) -> {
            SaleDetails detail = saleDetailsRepository.findById(saleDetailId)
                    .orElseThrow(() -> new EntityNotFoundException("Detalle de venta no encontrado"));

            // Validar que la cantidad reclamada no exceda la comprada
            if (quantity > detail.getQuantity()) {
                throw new IllegalArgumentException("La cantidad reclamada no puede ser mayor a la comprada");
            }

            // Si se reclama la cantidad completa
            if (quantity == detail.getQuantity()) {
                detail.setClaim(savedClaim);
                saleDetailsRepository.save(detail);
                claimedDetails.add(detail);
            }
            // Si es un reclamo parcial
            else {
                // Crear un nuevo detalle para el reclamo parcial
                SaleDetails partialDetail = new SaleDetails();
                partialDetail.setProduct(detail.getProduct());
                partialDetail.setQuantity(quantity);
                partialDetail.setSubtotal(detail.getProduct().getPrice() * quantity);
                partialDetail.setClaim(savedClaim);
                partialDetail.setSale(sale);  // Misma venta

                SaleDetails savedPartialDetail = saleDetailsRepository.save(partialDetail);
                claimedDetails.add(savedPartialDetail);

                // Actualizar el detalle original
                detail.setQuantity(detail.getQuantity() - quantity);
                detail.setSubtotal(detail.getProduct().getPrice() * detail.getQuantity());
                saleDetailsRepository.save(detail);
            }
        });

        // Asignar los detalles reclamados al claim
        savedClaim.setSaleDetails(claimedDetails);
        return claimRepository.save(savedClaim);
    }

    //Obtener todos los reclamos
    public List<Claim> getAllClaims() {
        return claimRepository.findAll();
    }

    // Subir comprobante de despacho
    public Claim uploadProof(Long claimId, String proofUrl) {
        Claim claim = getClaimById(claimId);
        claim.uploadProof(proofUrl);
        return claimRepository.save(claim);
    }

    // Aprobar devolución y procesar reembolso
    @Transactional
    public Claim approveRefund(Long claimId) {
        Claim claim = getClaimById(claimId);
        claim.approveRefund();

        // Procesar reembolso financiero (implementar esta lógica)
        processFinancialRefund(claim);

        return claimRepository.save(claim);
    }

    // Recibir paquete y actualizar stock
    @Transactional
    public Claim receivePackage(Long claimId) {
        Claim claim = getClaimById(claimId);
        claim.receivePackage();

        // Actualizar stock de productos
        updateProductStock(claim);

        return claimRepository.save(claim);
    }

    private void processFinancialRefund(Claim claim) {
        // Lógica para revertir el pago al cliente
        // (depende de tu sistema de pagos)
        BigDecimal refundAmount = calculateRefundAmount(claim);
        // financialService.processRefund(claim.getSale().getCustomer(), refundAmount);
    }

    private void updateProductStock(Claim claim) {
        for (SaleDetails detail : claim.getSaleDetails()) {
            Product product = productService.getProductById(detail.getProduct().getId());
            product.setStock(product.getStock() + detail.getQuantity());
            productService.saveProduct(product);
        }
    }

    private BigDecimal calculateRefundAmount(Claim claim) {
        return claim.getSaleDetails().stream()
                .map(detail -> BigDecimal.valueOf(detail.getProduct().getPrice()).multiply(BigDecimal.valueOf(detail.getQuantity())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    public Claim getClaimById(Long id) {
        return claimRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Reclamo no encontrado"));
    }

    public List<Claim> getClaimsByState(Claim.State state) {
        return claimRepository.findByState(state);
    }
}