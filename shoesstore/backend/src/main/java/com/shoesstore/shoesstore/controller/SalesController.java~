package com.shoesstore.shoesstore.controller;

import com.shoesstore.shoesstore.model.Product;
import com.shoesstore.shoesstore.model.Sale;
import com.shoesstore.shoesstore.service.ProductService;
import com.shoesstore.shoesstore.service.SaleService;
import com.shoesstore.shoesstore.utils.SaleForm;
import com.shoesstore.shoesstore.utils.SaleItemForm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/sales")
public class SalesController {

    @Autowired
    private ProductService productService;

    @Autowired
    private SaleService saleService;

    @GetMapping
    public String showNewSaleForm(Model model) {
        // Obtener la lista de productos
        List<Product> products = productService.getAllProducts();

        // Inicializar el formulario con un ítem por cada producto (cantidad por defecto 0)
        SaleForm saleForm = new SaleForm();
        products.forEach(product -> {
            SaleItemForm item = new SaleItemForm();
            item.setProductId(product.getCode());
            item.setQuantity(0);
            saleForm.getSaleItems().add(item);
        });

        // Agregar datos al modelo
        model.addAttribute("title", "Ventas");
        model.addAttribute("saleForm", saleForm);
        model.addAttribute("channels", List.of("ONLINE", "TIENDA"));
        model.addAttribute("products", products);
        model.addAttribute("view", "sales/newSale");

        return "layout";  // Vista Thymeleaf para nueva venta
    }

    @PostMapping
    public String registerSale(
            @ModelAttribute("saleForm") SaleForm saleForm,
            BindingResult result,
            RedirectAttributes redirectAttrs,    // ← inyectamos RedirectAttributes
            Model model) {

        if (result.hasErrors()) {
            model.addAttribute("channels", Sale.SaleChannel.values());
            model.addAttribute("products", productService.getAllProducts());
            redirectAttrs.addFlashAttribute("error", "Hubo un error al procesar la venta."); // ← flash
            return "redirect:/sales";  // ← redirect igual
        }

        // Filtrar ítems con qty > 0

        List<SaleItemForm> itemsToProcess = saleForm.getSaleItems().stream()
                .filter(item -> item.getQuantity() != null && item.getQuantity() > 0)
                .collect(Collectors.toList());

        if (!itemsToProcess.isEmpty()) {
            Sale sale = new Sale();
            sale.setChannel(Sale.SaleChannel.valueOf(saleForm.getChannel()));
            sale.setSaleDate(LocalDateTime.now());

            saleService.processSale(sale, itemsToProcess);

            redirectAttrs.addFlashAttribute("success", "Venta registrada exitosamente."); // ← flash
        }
        else{
            redirectAttrs.addFlashAttribute("error", "No se pueden vender 0 o menos productos."); // ← flash
        }
        return "redirect:/sales";
    }
}


