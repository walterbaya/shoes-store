package com.shoesstore.shoesstore.service;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

@Service
public class FileStorageService {

    private Path fileStorageLocation;

    @Value("${file.upload-dir}")
    private String uploadDir;

    @PostConstruct
    public void init() {
        try {
            this.fileStorageLocation = Paths.get(uploadDir)
                    .toAbsolutePath()
                    .normalize();
            Files.createDirectories(this.fileStorageLocation);
        } catch (IOException ex) {
            throw new RuntimeException("No se pudo crear el directorio de subidas", ex);
        }
    }

    public FileStorageService() {
        // Constructor vacío para Spring
    }

    /**
     * Método original: guarda un archivo en la carpeta base
     * uploads/ y devuelve el nombre generado.
     */
    public String storeFile(MultipartFile file) {
        String fileName = StringUtils.cleanPath(file.getOriginalFilename());

        try {
            // Validar nombre de archivo
            if (fileName.contains("..")) {
                throw new IllegalArgumentException("Nombre de archivo inválido: " + fileName);
            }

            // Generar nombre único
            String newFileName = UUID.randomUUID() + "_" + fileName;
            Path targetLocation = this.fileStorageLocation.resolve(newFileName);

            try (InputStream in = file.getInputStream()) {
                Files.copy(in, targetLocation, StandardCopyOption.REPLACE_EXISTING);
            }

            return newFileName;
        } catch (IOException ex) {
            throw new RuntimeException("Error al guardar el archivo: " + fileName, ex);
        }
    }

    /**
     * Nuevo método: guarda un archivo dentro de un subdirectorio
     * específico para la orden (uploads/{orderId}/) y devuelve
     * la ruta relativa "{orderId}/{uuid}_{originalName}".
     */
    public String storeFileForOrder(Long orderId, MultipartFile file) {
        String original = StringUtils.cleanPath(file.getOriginalFilename());
        if (original.contains("..")) {
            throw new IllegalArgumentException("Nombre de archivo inválido: " + original);
        }
        String newFileName = UUID.randomUUID() + "_" + original;

        try {
            // Crear carpeta uploads/{orderId} si no existe
            Path orderDir = this.fileStorageLocation.resolve(orderId.toString());
            Files.createDirectories(orderDir);

            // Copiar el archivo en uploads/{orderId}/{newFileName}
            Path targetLocation = orderDir.resolve(newFileName);
            try (InputStream in = file.getInputStream()) {
                Files.copy(in, targetLocation, StandardCopyOption.REPLACE_EXISTING);
            }

            // Retornar la ruta relativa para almacenar en BD
            return orderId + "/" + newFileName;
        } catch (IOException ex) {
            throw new RuntimeException(
                    "Error al guardar el archivo para la orden " + orderId, ex);
        }
    }

    /**
     * Carga un archivo guardado (por ruta relativa) como Resource
     * para que pueda ser descargado o servido.
     */
    public Resource loadFileAsResource(String relativePath) {
        try {
            Path filePath = this.fileStorageLocation.resolve(relativePath).normalize();
            Resource resource = new UrlResource(filePath.toUri());
            if (resource.exists() && resource.isReadable()) {
                return resource;
            }
            throw new RuntimeException("No se puede leer el archivo: " + relativePath);
        } catch (MalformedURLException ex) {
            throw new RuntimeException("URL inválida para el archivo: " + relativePath, ex);
        }
    }

    /**
     * Elimina un archivo dado su ruta relativa en el filesystem.
     */
    public void deleteFile(String relativePath) {
        try {
            Path filePath = this.fileStorageLocation.resolve(relativePath).normalize();
            Files.deleteIfExists(filePath);
        } catch (IOException ex) {
            throw new RuntimeException("No se pudo borrar el archivo: " + relativePath, ex);
        }
    }
}